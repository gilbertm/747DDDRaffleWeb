@inject NavigationManager NavigationManager

@if (!hideThePage)
{
    <MudCarousel Class="mud-width-full" Style="height:50em;" AutoCycleTime="TimeSpan.FromSeconds(15)" ShowArrows="@_arrows" ShowBullets="@_bullets" EnableSwipeGesture="@_enableSwipeGesture" AutoCycle="@_autocycle" TData="object">
        <MudCarouselItem Transition="_transition" Color="@Color.Primary">
            <div class="d-flex hero object-fit" style="height:100%;background-image:url(@(Config[ConfigNames.ApiBaseUrl] + "Files/backgrounds/sample1.jpg"));">
                <MudContainer Class="my-auto mx-auto pa-0 text-center" Style="z-index:2" MaxWidth="MaxWidth.Medium">
                    <MudText Typo="Typo.h1" Style="@($"color:{Colors.Shades.White};font-weight:700")">Raffle Entries</MudText>
                    <MudText Typo="Typo.h5" Class="mb-4" Style="@($"color:{Colors.Shades.White};")">Running 747 Raffle Entries</MudText>
                </MudContainer>
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="_transition">
            <div class="d-flex hero object-fit" style="height:100%;background-image:url(@(Config[ConfigNames.ApiBaseUrl] + "Files/backgrounds/sample2.jpg"));">
                <MudContainer Class="my-auto mx-auto pa-0 text-center" Style="z-index:2" MaxWidth="MaxWidth.Medium">
                    <MudText Typo="Typo.h1" Style="@($"color:{Colors.Shades.White};font-weight:700")">About 747 Raffle Live</MudText>
                    <MudText Typo="Typo.h5" Class="mb-4" Style="@($"color:{Colors.Shades.White};")">Raffles for our 747 Community</MudText>
                    <MudButton Href="/about-us" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Size="Size.Small" Color="Color.Primary" Style="justify-content:left;box-shadow:none !important;text-transform:none;background:transparent;"><MudText Typo="Typo.body2" Style="@($"color:{Colors.Shades.White};")">About 747 Raffle</MudText></MudButton>
                </MudContainer>
            </div>
        </MudCarouselItem>
    </MudCarousel>
}

@code {
    [Parameter]
    public string HideIfThesePages { get; set; } = string.Empty;

    [Parameter]
    public EventCallback OnHideChange { get; set; }

    private string _currentUrl = default!;
    private Uri _uri = default!;

    private bool _arrows = true;
    private bool _bullets = true;
    private bool _enableSwipeGesture = true;
    private bool _autocycle = true;
    private Transition _transition = Transition.Slide;

    private bool hideThePage = false;

    private String[] _arrHideIfThesePages = default!;

    protected override void OnInitialized()
    {
        _arrHideIfThesePages = HideIfThesePages.Split(",", StringSplitOptions.RemoveEmptyEntries);
    }

    protected override void OnParametersSet()
    {
        _currentUrl = NavigationManager.Uri;

        _uri = new Uri(_currentUrl);

        if (_uri is { } && _uri.Segments.Count() > 1)
        {

            string targetPage = _uri.Segments.ToList().ElementAt(1).ToString();

            HidePage(_arrHideIfThesePages, targetPage);
        }
    }

    private void HidePage(String[] arrToHidePages, string targetPage)
    {
        hideThePage = false;

        if (_arrHideIfThesePages.Contains(targetPage))
        {
            hideThePage = true;
        }

        StateHasChanged();
    }
}
