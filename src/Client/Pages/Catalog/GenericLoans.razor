@page "/catalog/all/loans"
@using System.Globalization
@attribute [MustHavePermission(EHULOGAction.View, EHULOGResource.Loans)]

@inject IStringLocalizer<GenericLoans> L

<EhulogTitle Title="@L["Loans"]" Description="@L["Manage Loans."]" />

@if (_appUserDto is not null)
{
    @*  @ref="_table" *@
    <EntityTable TEntity="LoanDto" TId="Guid" TRequest="LoanViewModel" Context="@Context">
        <EditFormContent>

            @if (!Context.AddEditModal.IsCreate)
            {
                <MudItem xs="12" md="6" Class="d-none">
                    <MudTextField Value="context.Id" ReadOnly DisableUnderLine Label="@L[$"Loan Lender Id"]" />
                </MudItem>
            }

            <MudItem xs="12" md="4">
                @* @bind-Value="context.ProductId" *@
                <ProductAutocomplete Required="true" For="@(() => context.ProductId)" OffsetY="true" Immediate="true" ValueChanged="@((Guid val) => AutocompleteProductChange(val))" />

                @if (context.Product is not null)
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Class="d-none" Typo="Typo.body1">@context.Product.Id</MudText>
                                <MudText Typo="Typo.h5">@context.Product.Name</MudText>
                                @if (context.Product.Category is not null && !string.IsNullOrEmpty(context.Product.Category?.Name))
                                {
                                    <MudText Typo="Typo.caption">Category: @context.Product.Category.Name</MudText>
                                }
                                @if (context.Product.Brand is not null && !string.IsNullOrEmpty(context.Product.Brand?.Name))
                                {
                                    <MudText Typo="Typo.caption"> Brand: @context.Product.Brand.Name</MudText>
                                }

                            </CardHeaderContent>
                            <CardHeaderActions>
                                @if (context.Product.ProductType.Equals(ProductType.System))
                                {
                                    <MudIconButton Icon="@Icons.Filled.Computer" Color="Color.Default" Disabled="true" />
                                }
                                else
                                {
                                    <MudIconButton Icon="@Icons.Filled.DashboardCustomize" Color="Color.Default" Disabled="true" />
                                }

                            </CardHeaderActions>
                        </MudCardHeader>

                        @if (context.Product.Image is not null && !string.IsNullOrEmpty(context.Product.Image.ImagePath))
                        {
                            var image = Config[ConfigNames.ApiBaseUrl] + context.Product.Image.ImagePath;

                            <MudCardMedia Image="@image" Height="150" Class="position-relative" />
                        }

                        @if (!string.IsNullOrEmpty(context.Product?.Description))
                        {
                            <MudCardContent>
                                <MudText Typo="Typo.h5" Color="Color.Success">Amount:</MudText>
                                <MudText Typo="Typo.h3">@context.Product.Amount</MudText>

                                <MudText Typo="Typo.body2">@context.Product.Description</MudText>
                            </MudCardContent>
                        }
                    </MudCard>
                }
            </MudItem>

            <MudItem xs="12" md="8">
                <MudGrid Spacing="2" Justify="Justify.FlexStart">

                    <MudItem xs="12" md="6">
                        <MudTextField Required="true" T="int" Label="@L["Loan Month"]" For="@(() => context.Month)" @bind-Value="context.Month" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Required="true" T="float" Label="@L["Loan Interest"]" For="@(() => context.Interest)" @bind-Value="context.Interest" Format="F2" Culture="@CultureInfo.InvariantCulture" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudDatePicker Required="true" IsDateDisabledFunc="@((DateTime val) => DisableOldDates(val))" Label="Start of payment" Editable="true" MinDate="DateTime.Now" AdornmentColor="Color.Secondary" DateChanged="@((DateTime? val) => StartDatePayment(val))" Placeholder="Select Start of payment" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect Required="true" @bind-Value="context.InterestType" Label="Select Interest Type" HelperText="Enum" OpenIcon="@Icons.Material.Filled.Insights" AdornmentColor="Color.Secondary">
                            @foreach (InterestType item in Enum.GetValues(typeof(InterestType)))
                            {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect Required="true" @bind-Value="context.Status" Label="Select Status" HelperText="Draft to save. Publish for public view." OpenIcon="@Icons.Material.Filled.Archive" AdornmentColor="Color.Secondary">
                            <MudSelectItem Value="@LoanStatus.Draft">Draft</MudSelectItem>
                            <MudSelectItem Value="@LoanStatus.Published">Publish</MudSelectItem>
                        </MudSelect>
                    </MudItem>
            </MudGrid>
        </MudItem>

    </EditFormContent>
</EntityTable>
}

@code {

    public bool DisableOldDates(DateTime val)
    {
        if (val < DateTime.Now)
        {
            return true;
        }

        return false;
    }

    public void StartDatePayment(DateTime? dateTime)
    {
        if (dateTime is not null)
            Context.AddEditModal.RequestModel.StartOfPayment = dateTime.Value;
    }
    public void AutocompleteProductChange(Guid id)
    {
        var product = appUserProducts.Where(ap => (ap.Product is not null) && ap.Product.Id.Equals(id)).FirstOrDefault();

        if (product is not null)
        {
            if (product.Product is not null)
            {
                Context.AddEditModal.RequestModel.ProductId = product.Product.Id;

                Context.AddEditModal.RequestModel.Product.Id = product.Product.Id;
                Context.AddEditModal.RequestModel.Product.Name = product.Product.Name;
                Context.AddEditModal.RequestModel.Product.Description = product.Product.Description;

                if (product.Product.Category is not null)
                {
                    Context.AddEditModal.RequestModel.Product.Category.Id = product.Product.Category.Id;
                    Context.AddEditModal.RequestModel.Product.Category.Name = product.Product.Category.Name;
                }
                if (product.Product.Brand is not null)
                {

                    Context.AddEditModal.RequestModel.Product.Brand.Id = product.Product.Brand.Id;
                    Context.AddEditModal.RequestModel.Product.Brand.Name = product.Product.Brand.Name;
                }
                if (product.Product.Image is not null)
                {

                    Context.AddEditModal.RequestModel.Product.Image.Id = product.Product.Image.Id;
                    Context.AddEditModal.RequestModel.Product.Image.ImagePath = product.Product.Image.ImagePath;
                }

                Context.AddEditModal.RequestModel.Product.Amount = product.Product.Amount;
                Context.AddEditModal.RequestModel.Product.ProductType = product.Product.ProductType;
            }
            Context.AddEditModal.ForceRender();
        }
    }

    protected RenderFragment<LoanDto> LoanTemplate => trail => __builder =>
    {
         var loanLender = trail.LoanLenders?.Where(l => l.LoanId.Equals(trail.Id) && l.LenderId.Equals(_appUserDto.Id)).FirstOrDefault();

        var _imageUrl = string.IsNullOrEmpty(loanLender.Product.Image?.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + loanLender.Product.Image?.ImagePath);

        <MudCard Elevation="0">
            <MudCardContent>
                @if (!string.IsNullOrEmpty(_imageUrl))
                {
                    <MudAvatar Square="true" Image="@_imageUrl" Style=" width:150px;height:100px;position:relative"></MudAvatar>
                }
                <MudButton Href="@string.Format("/catalog/loans/{0}", trail.Id)" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Info">Send</MudButton>

            </MudCardContent>
        </MudCard>
    };

    protected RenderFragment<LoanDto> LoanDetailsTemplate => trail => __builder =>
    {
        <MudPaper Class="pa-2 ma-2 text-left" Elevation="0">
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Numbers" Title="Month" /> @trail.Month Month(s)</MudText><br />
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Percent" Title="Interest" /> @trail.Interest</MudText><br />
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ShowChart" Title="Interest type" /> @trail.InterestType</MudText><br />
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Event" Title="Start of payment" /> @string.Format("{0:dddd, MMMM d, yyyy}", trail.StartOfPayment)</MudText>
        </MudPaper>
    };

    protected RenderFragment<LoanDto> LoanStatusTemplate => trail => __builder =>
    {
        <MudCard Elevation="0">
            <MudCardContent>
            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.ShowChart" Title="Status" />
            <MudText Typo="Typo.body1">@trail.Status</MudText><br />
            </MudCardContent>
        </MudCard>
    };
}