@page "/catalog/all/loans"
@using System.Linq
@using System.Globalization
@attribute [MustHavePermission(EHULOGAction.View, EHULOGResource.Loans)]

@inject IStringLocalizer<GenericLoans> L

<EhulogTitle Title="@L["Loans"]" Description="@L["Manage Loans."]" />

@if (_appUserDto is not null)
{
    @* @ref="_table" *@
    <EntityTable TEntity="LoanDto" TId="Guid" TRequest="LoanViewModel" Context="@Context">
        <EditFormContent>

            @if (!Context.AddEditModal.IsCreate)
            {
                <MudItem xs="12" md="6" Class="d-none">
                    <MudTextField Value="Context.AddEditModal.RequestModel.Id" ReadOnly DisableUnderLine Label="@L[$"Loan Lender Id"]" />
                </MudItem>
            }

            <MudItem xs="12" md="4">

                @* Disabled="@(!Context.AddEditModal.IsCreate ? true : false)" *@
                <ProductAutocomplete Disabled="@(!Context.AddEditModal.IsCreate ? true : false)" ReadOnly="@(!Context.AddEditModal.IsCreate ? true : false)" Required="true" For="@(() => Context.AddEditModal.RequestModel.ProductId)" OffsetY="true" Immediate="true" Text="@Context.AddEditModal.RequestModel.Product.Name" Value="@Context.AddEditModal.RequestModel.ProductId" ValueChanged="@((Guid val) => AutocompleteProductChange(val))" />

                @if (Context.AddEditModal.RequestModel.Product is not null)
                {
                    <MudCard Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Class="d-none" Typo="Typo.body1">@Context.AddEditModal.RequestModel.ProductId</MudText>
                                <MudText Typo="Typo.h5">@Context.AddEditModal.RequestModel.Product.Name</MudText>
                                @if (Context.AddEditModal.RequestModel.Product.Category is not null && !string.IsNullOrEmpty(Context.AddEditModal.RequestModel.Product.Category?.Name))
                                {
                                    <MudText Typo="Typo.caption">Category: @Context.AddEditModal.RequestModel.Product.Category?.Name</MudText>
                                }
                                @if (Context.AddEditModal.RequestModel.Product.Brand is not null && !string.IsNullOrEmpty(Context.AddEditModal.RequestModel.Product.Brand?.Name))
                                {
                                    <MudText Typo="Typo.caption"> Brand: @Context.AddEditModal.RequestModel.Product.Brand?.Name</MudText>
                                }

                            </CardHeaderContent>
                            <CardHeaderActions>
                                @if (Context.AddEditModal.RequestModel.Product.ProductType.Equals(ProductType.System))
                                {
                                    <MudIconButton Icon="@Icons.Filled.Computer" Color="Color.Default" Disabled="true" />
                                }
                                else
                                {
                                    <MudIconButton Icon="@Icons.Filled.DashboardCustomize" Color="Color.Default" Disabled="true" />
                                }

                            </CardHeaderActions>
                        </MudCardHeader>

                        @if (Context.AddEditModal.RequestModel.Product.Image is not null && !string.IsNullOrEmpty(Context.AddEditModal.RequestModel.Product.Image?.ImagePath))
                        {
                            var image = Config[ConfigNames.ApiBaseUrl] + Context.AddEditModal.RequestModel.Product.Image?.ImagePath;

                            <MudCardMedia Image="@image" Height="150" Class="position-relative" />
                        }

                        @if (!string.IsNullOrEmpty(Context.AddEditModal.RequestModel.Product?.Description))
                        {
                            <MudCardContent>
                                <MudText Typo="Typo.body1" Color="Color.Tertiary">Base amount:</MudText>
                                <MudText Typo="Typo.body1" Color="Color.Tertiary">@Context.AddEditModal.RequestModel.Product.Amount</MudText>

                                <MudText Typo="Typo.body2">@Context.AddEditModal.RequestModel.Product.Description</MudText>
                            </MudCardContent>
                        }
                    </MudCard>
                }
            </MudItem>

            <MudItem xs="12" md="8">
                <MudGrid Spacing="2" Justify="Justify.FlexStart">

                    <MudItem xs="12" md="6">
                        <MudSelect Required="true" T="int" @bind-Value="@MonthsToPay" For="@(() => Context.AddEditModal.RequestModel.Month)" Immediate="true" Label="Select month(s)" OpenIcon="@Icons.Material.Filled.DateRange" AdornmentColor="Color.Secondary">
                            @foreach (int i in Enumerable.Range(0, 13))
                            {
                                <MudSelectItem T="int" Value="@i">@i</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTooltip Text="Payment terms in months">
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Info" Style="@($"color:{Colors.Grey.Darken3};")" />
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect Disabled="_disabledInterestSelection" ReadOnly="_disabledInterestSelection" Required="true" T="float" @bind-Value="@ChangeInterest" For="@(() => Context.AddEditModal.RequestModel.Interest)" Immediate="true" Label="Select interest rates" OpenIcon="@Icons.Material.Filled.PieChartOutline" AdornmentColor="Color.Secondary">
                            @foreach (float f in Enumerable.Range(0, 15).Select(f => f == 0 ? 0.0f : (f / 2.0f) + 0.50f))
                            {
                                <MudSelectItem T="float" Value="@f">@f</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTooltip Text="Interest rates, applies only to compount type">
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Info" Style="@($"color:{Colors.Grey.Darken3};")" />
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudDatePicker Required="true" Date="@DateTime.Now" IsDateDisabledFunc="@((DateTime val) => DisableOldDates(val))" Label="Start of payment" Editable="true" MinDate="DateTime.Now.AddDays(-1)" AdornmentColor="Color.Secondary" Text="@DateIsNewlyCreated(Context.AddEditModal.RequestModel.StartOfPayment)" DateChanged="@((DateTime? val) => StartDatePayment(val))" Placeholder="Select Start of payment" DateFormat="dddd, MMMM d, yyyy" />
                        <MudTooltip Text="Starting payment for the leger payment cycles. The payment cycles are in months, giving enough breathing room for the lessees">
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Info" Style="@($"color:{Colors.Grey.Darken3};")" />
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect Required="true" @bind-Value="@ChangeInterestType" Label="Select Interest Type" HelperText="Enum" OpenIcon="@Icons.Material.Outlined.Insights" AdornmentColor="Color.Secondary">
                            @foreach (InterestType item in Enum.GetValues(typeof(InterestType)))
                            {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                    </MudSelect>
                    <MudTooltip Text="Interest modes, computed for diminishing and fixed for zero and ultimate do-good feeling.">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Info" Style="@($"color:{Colors.Grey.Darken3};")" />
                    </MudTooltip>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSelect Required="true" @bind-Value="Context.AddEditModal.RequestModel.Status" Label="Select Status" HelperText="Draft to save. Publish for public view." OpenIcon="@Icons.Material.Filled.Archive" AdornmentColor="Color.Secondary">
                        <MudSelectItem Value="@LoanStatus.Draft">Draft</MudSelectItem>
                        <MudSelectItem Value="@LoanStatus.Published">Publish</MudSelectItem>
                    </MudSelect>
                    <MudTooltip Text="Published will release the loan to the wild. Once published, the loan can't be updated anymore, if there's runnng transactions.">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Info" Style="@($"color:{Colors.Grey.Darken3};")" />
                    </MudTooltip>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCheckBox @bind-Checked="@IsCollateralChange" Color="Color.Secondary" Label="Require Collateral" CheckedIcon="@Icons.Material.Outlined.RadioButtonChecked" UncheckedIcon="@Icons.Material.Filled.RadioButtonUnchecked"></MudCheckBox>
                    <MudPaper Elevation="0" Class="pa-1" Style="@(!Context.AddEditModal.RequestModel.IsCollateral ? "d-none" : "")">
                        <MudTextField Disabled="@(!Context.AddEditModal.RequestModel.IsCollateral ? true : false)" T="string" Label="Collateral" Variant="Variant.Outlined" @bind-bind-Value="Context.AddEditModal.RequestModel.InfoCollateral" Text="@(string.IsNullOrEmpty(Context.AddEditModal.RequestModel.InfoCollateral) ? _infoCollateralGeneric : Context.AddEditModal.RequestModel.InfoCollateral)" Lines="3" />
                        @*
                            The uplaod must be on the lessee's side'
                        <CustomFileUpload @key="@("Collateral")" FileIdentifier="InputOutputResourceDocumentType.None" ForUploadFiles="ForUploadFiles" /> *@
                    </MudPaper>
                    <MudTooltip Text="@_infoCollateralGenericHelpText">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Info" Style="@($"color:{Colors.Grey.Darken3};")" />
                    </MudTooltip>
                </MudItem>

                @if (TemporaryLedgerTable is not null && TemporaryLedgerTable.Count() > 0)
                    {
                        <MudItem xs="12" md="12">
                            <MudText Typo="Typo.h6" Color="Color.Primary">Amount + Interest: </MudText>
                            <MudText Typo="Typo.h5" Color="Color.Success">@string.Format("{0:#,0.00}", TemporaryLedgerTable.Sum(s => s.Amount))</MudText>

                            <MudTable Class="ehulog-mud-table-compact" Items="@TemporaryLedgerTable" Context="ledger" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                                <HeaderContent>
                                    <MudTh><MudText Typo="Typo.caption">Position</MudText></MudTh>
                                    <MudTh><MudText Typo="Typo.caption">Due</MudText></MudTh>
                                    <MudTh><MudText Typo="Typo.caption">Amount</MudText></MudTh>
                                    <MudTh><MudText Typo="Typo.caption">Balance</MudText></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Position"><MudText Typo="Typo.caption">@ledger.Position</MudText></MudTd>
                                    <MudTd DataLabel="Due"><MudText Typo="Typo.caption">@string.Format("{0:MM/dd/yy}", ledger.Due)</MudText></MudTd>
                                    <MudTd DataLabel="Amount"><MudText Typo="Typo.caption">@string.Format("{0:#,0.00}", ledger.Amount)</MudText></MudTd>
                                    <MudTd DataLabel="Amount"><MudText Typo="Typo.caption">@string.Format("{0:#,0.00}", ledger.Balance)</MudText></MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>

        </EditFormContent>
    </EntityTable>
}

@code {
    private bool _disabledInterestSelection = false;

    private string _infoCollateralGeneric = "Anything of value (goods, items, memoirs, collector's items, etc) that would encourage the Lender to consider you recipient of the hard earned money.";
    private string _infoCollateralGenericHelpText = "Collateral adds more security from the lender. This info can contain required information that MUST be fulfilled by the lessee or applicants.";

    private bool IsCollateralChange
    {
        get
        {
            return Context.AddEditModal.RequestModel.IsCollateral;
        }
        set
        {
            Context.AddEditModal.RequestModel.IsCollateral = value;

            Context.AddEditModal.ForceRender();
        }
    }

    private int MonthsToPay
    {
        get
        {
            return Context.AddEditModal.RequestModel.Month;
        }
        set
        {
            Context.AddEditModal.RequestModel.Month = value;

            Task.Run(async () => await HandleInterest());
        }
    }

    private float ChangeInterest
    {
        get
        {
            return Context.AddEditModal.RequestModel.Interest;
        }
        set
        {
            Context.AddEditModal.RequestModel.Interest = value;

            Task.Run(async () => await HandleInterest());
        }
    }

    private InterestType ChangeInterestType
    {
        get
        {
            return Context.AddEditModal.RequestModel.InterestType;
        }
        set
        {
            Context.AddEditModal.RequestModel.InterestType = value;

            _disabledInterestSelection = false;

            if (value.Equals(InterestType.Zero))
            {
                _disabledInterestSelection = true;
            }

            Task.Run(async () => await HandleInterest());
        }


    }


    public class TemporaryLedgerTableElement
    {
        public int Position { get; set; }
        public DateTime Due { get; set; }
        public float Amount { get; set; }
        public float Balance { get; set; }
    }

    private List<TemporaryLedgerTableElement> TemporaryLedgerTable = new List<TemporaryLedgerTableElement>();

    private async Task HandleInterest()
    {
        // changing values of
        // the selected variable used on selects
        // triggers dynamic changes on the dropdown selected value
        if (Context.AddEditModal.RequestModel.InterestType == InterestType.Zero)
        {
            Context.AddEditModal.RequestModel.Interest = 0.0f;
        }
        else
        {
            // default to 5%, if number is weird and below 0
            if (Context.AddEditModal.RequestModel.Interest <= 0.0f)
            {
                Context.AddEditModal.RequestModel.Interest = 5.0f;
            }

        }

        GetLoanLedgerMemRequest getLoanLedgerMemRequest = new()
            {
                Amount = Context.AddEditModal.RequestModel.Product.Amount,
                Interest = Context.AddEditModal.RequestModel.Interest,
                InterestType = Context.AddEditModal.RequestModel.InterestType,
                Month = Context.AddEditModal.RequestModel.Month,
                StartOfPayment = Context.AddEditModal.RequestModel.StartOfPayment
            };

        if (await ApiHelper.ExecuteCallGuardedAsync(
        () => LoanLedgersClient.GetTemporaryLedgerAsync(getLoanLedgerMemRequest), Snackbar)
        is string resultDict)
        {
            TemporaryLedgerTable.Clear();

            if (!string.IsNullOrEmpty(resultDict))
            {
                var dictionary = System.Text.Json.JsonSerializer.Deserialize<Dictionary<int, Dictionary<string, object>>>(resultDict);

                if (dictionary is not null && dictionary.Count > 0)
                {
                    foreach (var item in dictionary)
                    {
                        float amountDue = 0.00f;
                        float balance = 0.00f;
                        DateTime dateDue = DateTime.UtcNow;

                        foreach (var kv in item.Value)
                        {
                            switch (kv.Key)
                            {
                                case "AmountDue":
                                    amountDue = Convert.ToSingle(kv.Value.ToString());
                                    break;
                                case "Balance":
                                    balance = Convert.ToSingle(kv.Value.ToString());
                                    break;
                                case "DateDue":
                                    dateDue = Convert.ToDateTime(kv.Value.ToString());
                                    break;
                            }
                        }

                        TemporaryLedgerTable.Add(new TemporaryLedgerTableElement()
                            {
                                Position = item.Key,
                                Due = dateDue,
                                Amount = amountDue,
                                Balance = balance
                            });
                    }


                }
            }
        }

        Context.AddEditModal.ForceRender();
    }

    public string DateIsNewlyCreated(DateTime? date = null)
    {
        if (date is null)
        {
            date = DateTime.Now.Date;
        }

        return string.Format("{0:dddd, MMMM d, yyyy}", date);
    }

    public bool DisableOldDates(DateTime val)
    {
        if (val < DateTime.Now.AddDays(-1))
        {
            return true;
        }

        return false;
    }

    public void StartDatePayment(DateTime? dateTime)
    {
        if (dateTime is not null)
            Context.AddEditModal.RequestModel.StartOfPayment = dateTime.Value;
    }

    public void AutocompleteProductChange(Guid id)
    {
        var userProduct = appUserProducts.Where(ap => (ap.Product is not null) && ap.Product.Id.Equals(id)).FirstOrDefault();

        if (userProduct is not null)
        {
            Context.AddEditModal.RequestModel.ProductId = default!;
            Context.AddEditModal.RequestModel.Product = new();
            Context.AddEditModal.RequestModel.Product.Image = new();
            Context.AddEditModal.RequestModel.Product.Brand = new();
            Context.AddEditModal.RequestModel.Product.Category = new();

            if (userProduct.Product is not null)
            {
                Context.AddEditModal.RequestModel.ProductId = userProduct.Product.Id;
                Context.AddEditModal.RequestModel.Product.Id = userProduct.Product.Id;
                Context.AddEditModal.RequestModel.Product.Name = userProduct.Product.Name;
                Context.AddEditModal.RequestModel.Product.Amount = userProduct.Product.Amount;

                if (userProduct.Product.Category is not null)
                {
                    Context.AddEditModal.RequestModel.Product.Category = userProduct.Product.Category;
                }

                if (userProduct.Product.Brand is not null)
                {
                    Context.AddEditModal.RequestModel.Product.Brand = userProduct.Product.Brand;
                }

                if (userProduct.Product.Image is not null)
                {
                    Context.AddEditModal.RequestModel.Product.Image = userProduct.Product.Image;
                }

                Task.Run(async () => await HandleInterest());

            }
        }
    }

    protected RenderFragment<LoanDto> LoanTemplate => trail => __builder =>
    {
        var loanLender = trail.LoanLenders?.Where(l => l.LoanId.Equals(trail.Id) && l.LenderId.Equals(_appUserDto.Id)).FirstOrDefault();
        var loanLedgerTotal = trail.Ledgers?.Where(l => l.LoanId.Equals(trail.Id)).Sum(s => s.AmountDue);

        var _imageUrl = string.IsNullOrEmpty(loanLender?.Product?.Image?.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + loanLender?.Product?.Image?.ImagePath);

        <MudCard Elevation="0">
            <MudCardHeader>
                <MudText Typo="Typo.h5">@string.Format("{0:#,0.00}", loanLedgerTotal)</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (!string.IsNullOrEmpty(_imageUrl))
                {
                    <MudAvatar Square="true" Image="@_imageUrl" Style=" width:150px;height:100px;position:relative"></MudAvatar>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Href="@string.Format("/catalog/loans/{0}", trail.Id)" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Info">Send</MudButton>
            </MudCardActions>
        </MudCard>
    };

    protected RenderFragment<LoanDto> LoanDetailsTemplate => trail => __builder =>
    {
        var loanLender = trail.LoanLenders?.Where(l => l.LoanId.Equals(trail.Id) && l.LenderId.Equals(_appUserDto.Id)).FirstOrDefault();

        <MudPaper Class="pa-2 ma-2 text-left" Elevation="0">
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Numbers" Title="Month" /> @trail.Month Month(s)</MudText><br />
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Percent" Title="Interest" /> @trail.Interest</MudText><br />
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ShowChart" Title="Interest type" /> @trail.InterestType</MudText><br />
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Event" Title="Start of payment" /> @string.Format("{0:dddd, MMMM d, yyyy}", trail.StartOfPayment)</MudText><br />
            <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Money" Title="Base Amount" /> Base amount: @string.Format("{0:#,0.00}", loanLender?.Product?.Amount)</MudText>
        </MudPaper>
    };

    protected RenderFragment<LoanDto> LoanStatusTemplate => trail => __builder =>
    {
        <MudCard Elevation="0">
            <MudCardContent>
                @switch (trail.Status)
                {
                    case LoanStatus.Draft:
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.EditNote" Title="Status" />
                        break;
                    case LoanStatus.Published:
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.CheckCircle" Title="Status" />
                        break;
                    default:
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Settings" Title="Status" />
                        break;
                }

                <MudText Typo="Typo.body1">@trail.Status</MudText><br />
            </MudCardContent>
            <MudCardActions>
                <MudText>Applicants (Published), allow up to 5</MudText>
                <br />
                <br />
                <MudText>Lessee the granted loan user.</MudText>
                <MudText>Show progress of the payment, one position at a time</MudText>

            </MudCardActions>
        </MudCard>
    };

    protected RenderFragment<LoanDto> LoanLedgersTemplate => trail => __builder =>
    {
        var ledgers = trail.Ledgers?.Where(l => l.LoanId.Equals(trail.Id)).OrderBy(o => o.Position).ToList();

        if (ledgers is not null && ledgers.Count() > 0)
        {
            <MudTable Items="@ledgers" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh><MudText Typo="Typo.caption">Position</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.caption">Due</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.caption">Amount</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.caption">Paid</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.caption">Status</MudText></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Position"><MudText Typo="Typo.caption">@context.Position</MudText></MudTd>
                    <MudTd DataLabel="Due"><MudText Typo="Typo.caption">@string.Format("{0:MM/dd/yy}", context.DateDue)</MudText></MudTd>
                    <MudTd DataLabel="Amount"><MudText Typo="Typo.caption">@string.Format("{0:#,0.00}", context.AmountDue)</MudText></MudTd>
                    <MudTd DataLabel="Paid"><MudText Typo="Typo.caption">@string.Format("{0:MM/dd/yy}", context.DatePaid)</MudText></MudTd>
                    <MudTd DataLabel="Status"><MudText Typo="Typo.caption">@context.Status</MudText></MudTd>
                </RowTemplate>
            </MudTable>
        }
    };
}