@page "/loans/lessee"
@using System.Globalization
@using EHULOG.BlazorWebAssembly.Client.Components.EntityContainer
@using EHULOG.BlazorWebAssembly.Client.Pages.Catalog.Loans
@using EHULOG.BlazorWebAssembly.Client.Pages.Catalog.Loans.Components

@attribute [MustHavePermission(EHULOGAction.View, EHULOGResource.LoanLessees)]

@inject IStringLocalizer<LesseeLoans> L

<EhulogTitle Title="@L["Loans"]" Description="@L["Browse"]" />

@if (AppDataService != default)
{
    @if (AppDataService.AppUser != default)
    {
        @if (!(new[] { "Lender", "Lessee" }.Contains(AppDataService.AppUser.RoleName)))
        {
            <MudText Typo="Typo.body2" Class="text-center mb-5" Color="Color.Error">Please complete your account profile. Features may not work as intended, if you have not completed this process.</MudText>
        }
        <CascadingValue Value="AppDataService" Name="AppDataService">
            @if (Context != default)
            {
                <EntityContainer TEntity="LoanDto" Context="@Context"></EntityContainer>

            }
        </CascadingValue>
    }
}

<LossGeolocationPopup />

@code {
    private LoanDto Loan { get; set; } = default!;

    protected RenderFragment<LoanDto> BodyTemplate => trail => __builder =>
    {
        @*
            in one cascading component
            ensures cascading change of loan value once updated from this main component
         *@
        <BlockLoan Loan="trail" />
    };
}

@code {

    private async Task UpdateLoan(Guid loanId)
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => LoansClient.GetAsync(loanId), Snackbar, null, "Success") is LoanDto loan)
        {
            if (loan != default)
            {
                if (loan.LoanApplicants != default)
                {

                    if (loan.LoanApplicants.Count > 0)
                    {
                        foreach (var loanApplicant in loan.LoanApplicants)
                        {
                            if (loanApplicant.AppUser != default)
                            {
                                var userDetailsDto = await UsersClient.GetByIdAsync(loanApplicant.AppUser.ApplicationUserId);

                                loanApplicant.AppUser.FirstName = userDetailsDto.FirstName;
                                loanApplicant.AppUser.LastName = userDetailsDto.LastName;
                                loanApplicant.AppUser.Email = userDetailsDto.Email;
                                loanApplicant.AppUser.PhoneNumber = userDetailsDto.PhoneNumber;
                                loanApplicant.AppUser.ImageUrl = userDetailsDto.ImageUrl;
                            }
                        }
                    }
                }

                if (loan.LoanLessees != default)
                {
                    if (loan.LoanLessees.Count > 0)
                    {
                        foreach (var loanLessee in loan.LoanLessees)
                        {
                            if (loanLessee.Lessee != default)
                            {
                                var userDetailsDto = await UsersClient.GetByIdAsync(loanLessee.Lessee.ApplicationUserId);

                                loanLessee.Lessee.FirstName = userDetailsDto.FirstName;
                                loanLessee.Lessee.LastName = userDetailsDto.LastName;
                                loanLessee.Lessee.Email = userDetailsDto.Email;
                                loanLessee.Lessee.PhoneNumber = userDetailsDto.PhoneNumber;
                                loanLessee.Lessee.ImageUrl = userDetailsDto.ImageUrl;
                            }
                        }
                    }
                }

                Loan = loan;

                StateHasChanged();
            }

        }

    }

}

