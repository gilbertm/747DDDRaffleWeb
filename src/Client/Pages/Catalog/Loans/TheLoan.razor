@page "/loan"
@page "/loan/{loanId:guid}"
@using System.Linq
@using System.Globalization
@using EHULOG.BlazorWebAssembly.Client.Pages.Catalog.Loans.Components
@using EHULOG.BlazorWebAssembly.Client.Pages.Catalog.Loans.Components.Block
@* attribute [MustHavePermission(EHULOGAction.View, EHULOGResource.Loans)] *@

@inject IStringLocalizer<TheLoan> L

<EhulogTitle Title="@(IOwnThis ? @L["Loan (I owned this)"] : @L["Loan"])" Description="@(IOwnThis ? @L["Manage loan. I can manage this loan, as I owned it."] : @L["View"])" />

@if (AppDataService != default)
{
    @if (AppDataService.AppUser != default)
    {
        <CascadingValue Value="@AppDataService" Name="AppDataService">

       
            @* allow edit on draft mode only and lender with business logic checks *@
            @if (Loan != default)
            {
                if ((new[] { LoanStatus.Draft, LoanStatus.Published }).Contains(Loan.Status))
                {
                    @* <CreateUpdateLoan Loan="Loan" /> *@

                    <MudGrid>
                        <MudItem xs="6" md="6">
                            <BlockLoan Loan="Loan" DisableStatus="true" />
                        </MudItem>
                        <MudItem xs="6" md="6">
                            @if (Loan.Ledgers != default)
                            {
                                <LoanLedger Ledger="Loan.Ledgers.ToList()" DisableStatusPaymentColumns="true" DisableHeader="true" />
                            }
                        </MudItem>

                    </MudGrid>
                }
                else if ((new[] { LoanStatus.Assigned, LoanStatus.Meetup, LoanStatus.Payment, LoanStatus.PaymentFinal, LoanStatus.Finish }).Contains(Loan.Status))
                {
                    if (CanUpdate)
                    {
                        <MudGrid Class="my-0">
                            <MudItem xs="12" md="6">
                                <MinimalBlockInfoLoanStatus Loan="Loan" OnUpdatedLoan="@( async () => await OnChildUpdatedLoan(Loan.Id))" />
                                @if (Loan.Ledgers != default)
                                {
                                    <LoanLedger Ledger="Loan.Ledgers.OrderBy(ledger => ledger.Position).ToList()" DisableHeader="true" />
                                }
                            </MudItem>
                            <MudItem xs="6" md="3">
                                <BlockLoan Loan="Loan" DisableStatus="true" />
                            </MudItem>
                            <MudItem xs="6" md="3" Class="text-center border-bottom">
                                <MudGrid>
                                    <MudItem xs="12">
                                        <BlockInfoLoanLessee Loan="Loan" />
                                    </MudItem>
                                    <MudItem xs="12" Style="opacity:0.5">
                                        <MudText Typo="Typo.h5" Style="@($"color:{Colors.BlueGrey.Lighten2}")">Archives</MudText>
                                        <BlockInfoLoanApplicants Loan="Loan" />
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                        </MudGrid>
                    }
                }

            }
        </CascadingValue>
    }

}

@code {
   
}