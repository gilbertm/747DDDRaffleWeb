@page "/catalog/administer/user/identification-files-documents"

@attribute [MustHavePermission(EHULOGAction.Update, EHULOGResource.InputOutputResources)]

@inject IStringLocalizer<FilesDocuments> L

<EhulogTitle Title="@L["Files and Documents"]" Description="@L["Manage Files and Documents."]" />

<EntityTable TEntity="InputOutputResourceDto" TId="Guid" TRequest="UpdateInputOutputResourceByIdRequest" Context="@Context">

    <EditFormContent>
        @if (!Context.AddEditModal.IsCreate)
        {
            var _imageUrl = string.IsNullOrEmpty(@context.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + context.ImagePath);

            <MudItem xs="12" md="6">
                <MudAvatar Square="true" Image="@_imageUrl" Style=" width:150px;height:100px;position:relative"></MudAvatar>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField Value="@context.Id" ReadOnly DisableUnderLine Label="@L[$"Id"]" />
            </MudItem>

            <MudRadioGroup @bind-SelectedOption="context.ResourceStatusType" T="InputOutputResourceStatusType">
                <MudRadio Option="InputOutputResourceStatusType.Disabled" Color="Color.Surface" Dense="true">Disabled</MudRadio>
                <MudRadio Option="InputOutputResourceStatusType.Enabled" Color="Color.Primary" Dense="true">Enabled</MudRadio>
                <MudRadio Option="InputOutputResourceStatusType.EnabledAndVerified" Color="Color.Primary" Dense="true">Enabled and Verified</MudRadio>
            </MudRadioGroup>
        }
    </EditFormContent>

</EntityTable>

@code {

    protected RenderFragment<InputOutputResourceDto> InputOutputResourceDtoTemplate => trail => __builder =>
    {
        var _imageUrl = string.IsNullOrEmpty(@trail.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + trail.ImagePath);

        <MudCard Elevation="0">
            <MudCardContent Class="px-0 py-0">
                @if (!string.IsNullOrEmpty(_imageUrl))
                {
                    <MudAvatar Square="true" Image="@_imageUrl" Style=" width:150px;height:100px;position:relative"></MudAvatar>
                }
            </MudCardContent>
        </MudCard>
    };

    protected RenderFragment<InputOutputResourceDto> InputOutputResourceDtoIdTemplate => trail => __builder =>
       {

           <MudCard Elevation="0">
               <MudCardContent Class="px-0 py-0">

                   @if (new[] { InputOutputResourceStatusType.Disabled, InputOutputResourceStatusType.Enabled }.Contains(trail.ResourceStatusType))
                   {
                       <MudText Typo="Typo.caption">Status:</MudText> <MudText Typo="Typo.caption" Class="d-inline" Color="Color.Dark">@trail.ResourceStatusType</MudText>

                   }
                   else
                   {
                       <MudText Typo="Typo.h5">Status:</MudText> <MudText Typo="Typo.h5" Class="d-inline" Style="Color.Success">@trail.ResourceStatusType</MudText>
                   }
                   <br />

                   <MudText Typo="Typo.caption">Id:</MudText> @trail.Id, <MudText Typo="Typo.caption">Type:</MudText>@trail.ResourceDocumentType
               </MudCardContent>
           </MudCard>
       };


}