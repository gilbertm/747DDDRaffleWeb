@using System.Threading
@implements IDisposable

@page "/component/timer/relogin"

<MudCard Elevation="0" Class="text-center">
    <MudCardHeader Class="d-block">
        <MudText Typo="Typo.h5" Class="d-block">Relogin</MudText>
        <MudText Typo="Typo.caption" Color="Color.Error" Class="d-block">*Required</MudText>
    </MudCardHeader>
    <MudCardContent>

        <MudText Typo="Typo.h6">@Seconds</MudText>

        @* @if (Seconds <= 3)
        { *@
            <MudText Typo="Typo.body1">Account changes. Logging out.</MudText>
        @* } *@
    </MudCardContent>
</MudCard>




@code {

    [Parameter]
    public int Seconds { get; set; } = 5;

    private System.Threading.Timer timer { get; set; } = default!;
    private int intervalPeriod = 1000; // 1 second

    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(async _ =>  // async void
        {
            Seconds--;

            if (Seconds <= 0)
            {
                Dispose();
                // await AuthService.ReLoginAsync(Navigation.Uri);
                await AuthService.ReLoginAsync("/login");
            }
            // we need StateHasChanged() because this is an async void handler
            // we need to Invoke it because we could be on the wrong Thread
            await InvokeAsync(StateHasChanged);
        }, null, 0, intervalPeriod);

    }

    public void Dispose()
    {
        timer.Dispose();
    }
}